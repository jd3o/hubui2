AWSTemplateFormatVersion: 2010-09-09

Parameters:
  #Website Details
  pWebsiteFQDN:
    Type: "String"
    Description: "The Fully-Qualified Domain Name for the website/application"
    Default: "myapp.nonprod.pge.com"
  pRefererValue:
    Type: 'String'
    Default: xzC1fcjr0IORrXATPShhzhpyhI3wwB
    Description: "The referer header value for restricting access to S3 (Will be stored in AWS Secrets Manager) "
    NoEcho: true
  pAppID:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /general/appid/pspsviewer
    Description: "AMPS ApplicationID"
  pEnv:
    Type: "String"
    Description: "Name of Environment"
  pNotify:
    Type: 'String'
    Default: LKG8@PGE.COM
    Description: "Individual or list to receive operational notifications"
  pOrderNumber:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /general/order/pspsviewer
    Description: "Expense Order Number to cover monthly costs"
  pOrg:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /general/org
    Description: "Organization / Line-of-Business Sponsoring Workload"
  pAppName:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /general/appname/pspsviewer
    Description: "AMPS ApplicationID"
  pPrivateHostedZoneId:
    Type: 'String'
    Description: "The Route 53 Hosted Zone ID containing the target sub-domain (e.g. nonprod.pge.com) "
    Default: Z1PO7XO596QKJW
  pCrossAccountServiceTokenARN:
    Type: 'String'
    Default: arn:aws:sns:us-east-1:514712703977:RequestRoute53CNAME
    Description: 'ServiceToken ARN for Route 53 updates in central account'
  pCFNOwnerTag:
    Type: 'String'
    Description: "CorpID of Table Owner"
    Default: LKG8
  pStackPrefix:
    Type: String
  pStackScope:
    Type: String
    Description: You can deploy this stack at a regional level, for regional WAF targets like Application Load Balancers, or for global targets, such as Amazon CloudFront distributions.
    AllowedValues:
      - Global
      - Regional
    Default: Global
  pRuleAction:
    Type: String
    Description: The type of action you want to iplement for the rules in this set. Valid options are COUNT, BLOCK or ALLOW.
    AllowedValues:
      - BLOCK
      - COUNT
      - ALLOW
    Default: ALLOW
  pHostedZoneId:
    Type: 'String'
    Description: "Route 53 HostedZoneId of target domain from Account hosting DNS"
    Default: Z184J8PCMR81S
  pRoute53AssumedRoleArn:
    Type: 'String'
    Description:  "ARN to perform Route53 updated in Account hosting DNS"
    Default: arn:aws:iam::514712703977:role/ACMRecordCreationRole

Conditions:
  isRegional: !Equals [ !Ref pStackScope, Regional ]
  isGlobal: !Equals [ !Ref pStackScope, Global ]

Resources:

  rCustomAcmCertificateLambda:
    Metadata:
      Source: https://github.com/dflook/cloudformation-dns-certificate
      Version: 1.7.1
    Properties:
      Code:
        ZipFile: "T=RuntimeError\nimport copy,hashlib as t,json,logging as B,time\
          \ as b\nfrom boto3 import client as K\nfrom botocore.exceptions import ClientError\
          \ as u,ParamValidationError as v\nfrom botocore.vendored import requests\
          \ as w\nA=B.getLogger()\nA.setLevel(B.INFO)\nD=A.info\nS=A.exception\nd=json.dumps\n\
          M=copy.copy\ne=b.sleep\ndef handler(event,c):\n\tA9='OldResourceProperties';A8='Update';A7='Delete';A6='None';A5='acm';A4='FAILED';A3='properties';A2='stack-id';A1='logical-id';A0='DNS';s='Old';r='Certificate';q='LogicalResourceId';p='DomainName';o='ValidationMethod';n='Route53RoleArn';m='Region';a='RequestType';Z='Reinvoked';Y='StackId';X=None;R='Status';Q='Key';P='';O=True;N='DomainValidationOptions';L=False;J='ResourceProperties';I='cloudformation:';H='Value';G='CertificateArn';F='Tags';C='PhysicalResourceId';A=event;f=c.get_remaining_time_in_millis;D(A)\n\
          \tdef g():\n\t\tD=M(B)\n\t\tfor H in ['ServiceToken',m,F,n]:D.pop(H,X)\n\
          \t\tif o in B:\n\t\t\tif B[o]==A0:\n\t\t\t\tfor I in set([B[p]]+B.get('SubjectAlternativeNames',[])):k(I)\n\
          \t\t\t\tdel D[N]\n\t\tA[C]=E.request_certificate(IdempotencyToken=y,**D)[G];l()\n\
          \tdef U(a):\n\t\twhile O:\n\t\t\ttry:E.delete_certificate(**{G:a});return\n\
          \t\t\texcept u as B:\n\t\t\t\tS(P);A=B.response['Error']['Code']\n\t\t\t\
          \tif A=='ResourceInUseException':\n\t\t\t\t\tif f()/1000<30:raise\n\t\t\t\
          \t\te(5);continue\n\t\t\t\tif A in['ResourceNotFoundException','ValidationException']:return\n\
          \t\t\t\traise\n\t\t\texcept v:return\n\tdef V(props):\n\t\tfor J in E.get_paginator('list_certificates').paginate():\n\
          \t\t\tfor B in J['CertificateSummaryList']:\n\t\t\t\tD(B);C={A[Q]:A[H]for\
          \ A in E.list_tags_for_certificate(**{G:B[G]})[F]}\n\t\t\t\tif C.get(I+A1)==A[q]and\
          \ C.get(I+A2)==A[Y]and C.get(I+A3)==hash(props):return B[G]\n\tdef h():\n\
          \t\tif A.get(Z,L):raise T('Certificate not issued in time')\n\t\tA[Z]=O;D(A);K('lambda').invoke(FunctionName=c.invoked_function_arn,InvocationType='Event',Payload=d(A).encode())\n\
          \tdef i():\n\t\twhile f()/1000>30:\n\t\t\tB=E.describe_certificate(**{G:A[C]})[r];D(B)\n\
          \t\t\tif B[R]=='ISSUED':return O\n\t\t\telif B[R]==A4:raise T(B.get('FailureReason',P))\n\
          \t\t\te(5)\n\t\treturn L\n\tdef x():B=M(A[s+J]);B.pop(F,X);C=M(A[J]);C.pop(F,X);return\
          \ B!=C\n\tdef j():\n\t\tW='Type';V='Name';U='HostedZoneId';T='ValidationStatus';S='PENDING_VALIDATION';L='ResourceRecord'\n\
          \t\tif B.get(o)!=A0:return\n\t\twhile O:\n\t\t\tI=E.describe_certificate(**{G:A[C]})[r];D(I)\n\
          \t\t\tif I[R]!=S:return\n\t\t\tif not[A for A in I.get(N,[{}])if T not in\
          \ A or L not in A]:break\n\t\t\tb.sleep(1)\n\t\tfor F in I[N]:\n\t\t\tif\
          \ F[T]==S:M=k(F[p]);P=M.get(n,B.get(n));J=K('sts').assume_role(RoleArn=P,RoleSessionName=(r+A[q])[:64],DurationSeconds=900)['Credentials']if\
          \ P is not X else{};Q=K('route53',aws_access_key_id=J.get('AccessKeyId'),aws_secret_access_key=J.get('SecretAccessKey'),aws_session_token=J.get('SessionToken')).change_resource_record_sets(**{U:M[U],'ChangeBatch':{'Comment':'Domain\
          \ validation for '+A[C],'Changes':[{'Action':'UPSERT','ResourceRecordSet':{V:F[L][V],W:F[L][W],'TTL':60,'ResourceRecords':[{H:F[L][H]}]}}]}});D(Q)\n\
          \tdef k(n):\n\t\tC='.';n=n.rstrip(C);D={A[p].rstrip(C):A for A in B[N]};A=n.split(C)\n\
          \t\twhile len(A):\n\t\t\tif C.join(A)in D:return D[C.join(A)]\n\t\t\tA=A[1:]\n\
          \t\traise T(N+' missing'+' for '+n)\n\thash=lambda v:t.new('md5',d(v,sort_keys=O).encode()).hexdigest()\n\
          \tdef l():B=M(A[J].get(F,[]));B+=[{Q:I+A1,H:A[q]},{Q:I+A2,H:A[Y]},{Q:I+'stack-name',H:A[Y].split('/')[1]},{Q:I+A3,H:hash(A[J])}];E.add_tags_to_certificate(**{G:A[C],F:B})\n\
          \tdef W():D(A);B=w.put(A['ResponseURL'],json=A,headers={'content-type':P});B.raise_for_status()\n\
          \ttry:\n\t\ty=hash(A['RequestId']+A[Y]);B=A[J];E=K(A5,region_name=B.get(m));A[R]='SUCCESS'\n\
          \t\tif A[a]=='Create':\n\t\t\tif A.get(Z,L)is L:A[C]=A6;g()\n\t\t\tj()\n\
          \t\t\tif not i():return h()\n\t\telif A[a]==A7:\n\t\t\tif A[C]!=A6:\n\t\t\
          \t\tif A[C].startswith('arn:'):U(A[C])\n\t\t\t\telse:U(V(B))\n\t\telif A[a]==A8:\n\
          \t\t\tif x():\n\t\t\t\tD(A8)\n\t\t\t\tif V(B)==A[C]:\n\t\t\t\t\ttry:E=K(A5,region_name=A[A9].get(m));D(A7);U(V(A[A9]))\n\
          \t\t\t\t\texcept:S(P)\n\t\t\t\t\treturn W()\n\t\t\t\tif A.get(Z,L)is L:g()\n\
          \t\t\t\tj()\n\t\t\t\tif not i():return h()\n\t\t\telse:\n\t\t\t\tif F in\
          \ A[s+J]:E.remove_tags_from_certificate(**{G:A[C],F:A[s+J][F]})\n\t\t\t\t\
          l()\n\t\telse:raise T(A[a])\n\t\treturn W()\n\texcept Exception as z:S(P);A[R]=A4;A['Reason']=str(z);return\
          \ W()"
      Description: Cloudformation custom resource for DNS validated certificates
      Handler: index.handler
      Role: !GetAtt 'rCustomAcmCertificateLambdaExecutionRole.Arn'
      FunctionName: !Sub 'psps-ui'
      Runtime: python3.6
      Timeout: 900
      Tags:
        - Key: AppName
          Value: !Ref pAppName
        - Key: AppId
          Value: !Ref pAppID
        - Key: Order
          Value: !Ref pOrderNumber
    Type: AWS::Lambda::Function

  rCustomAcmCertificateLambdaExecutionRole:
    Properties:
      RoleName: !Sub 'psps-ui-lambdarole-${pEnv}'
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - acm:AddTagsToCertificate
                  - acm:DeleteCertificate
                  - acm:DescribeCertificate
                  - acm:RemoveTagsFromCertificate
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:acm:*:${AWS::AccountId}:certificate/*'
              - Action:
                  - acm:RequestCertificate
                  - acm:ListTagsForCertificate
                  - acm:ListCertificates
                Effect: Allow
                Resource:
                  - "*"
              - Action:
                  - route53:ChangeResourceRecordSets
                Effect: Allow
                Resource:
                  - arn:aws:route53:::hostedzone/*
              - Action:
                  - sts:AssumeRole
                Resource:
                  - !Ref pRoute53AssumedRoleArn
                Effect: Allow    
            Version: '2012-10-17'
          PolicyName: !Sub 'psps-ui-lambdapolicy-${pEnv}'
    Type: AWS::IAM::Role

  rGeneratedCertificate:
    Properties:
      DomainName: !Ref pWebsiteFQDN
      DomainValidationOptions:
        - DomainName: !Ref pWebsiteFQDN
          HostedZoneId: !Ref pHostedZoneId
          Route53RoleArn: !Ref pRoute53AssumedRoleArn
      ServiceToken: !GetAtt 'rCustomAcmCertificateLambda.Arn'
      Tags:
        - Key: AppName
          Value: !Ref pAppName
        - Key: AppId
          Value: !Ref pAppID
        - Key: Order
          Value: !Ref pOrderNumber
      ValidationMethod: DNS
      Region: us-east-1
    Type: Custom::DNSCertificate

  rWafrWhitelistIpSet:
    Type: "AWS::WAFRegional::IPSet"
    Condition: isRegional
    Properties:
      Name: !Join ['-', [!Ref pStackPrefix, 'match-whitelisted-ips']]
      IPSetDescriptors:
        - Type: IPV4
          Value: 130.19.42.250/32
        - Type: IPV4
          Value: 130.19.42.251/32
        - Type: IPV4
          Value: 130.19.42.252/32
        - Type: IPV4
          Value: 130.19.42.253/32
        - Type: IPV4
          Value: 131.89.194.0/24
        - Type: IPV4
          Value: 131.89.195.0/24
        - Type: IPV4
          Value: 131.89.196.0/24
        - Type: IPV4
          Value: 131.89.197.0/24
        - Type: IPV4
          Value: 131.89.198.0/24
        - Type: IPV4
          Value: 131.89.199.0/24
        - Type: IPV4
          Value: 131.89.200.0/24
        - Type: IPV4
          Value: 131.89.201.0/24
        - Type: IPV4
          Value: 131.89.202.0/24
        - Type: IPV4
          Value: 131.89.203.0/24
        - Type: IPV4
          Value: 131.89.204.0/24
        - Type: IPV4
          Value: 131.89.205.0/24
        - Type: IPV4
          Value: 131.89.206.0/24
        - Type: IPV4
          Value: 131.89.207.0/24
        - Type: IPV4
          Value: 131.89.208.0/24
        - Type: IPV4
          Value: 131.89.209.0/24
        - Type: IPV4
          Value: 131.89.210.0/24
        - Type: IPV4
          Value: 131.89.211.0/24
        - Type: IPV4
          Value: 131.89.212.0/24
        - Type: IPV4
          Value: 131.89.213.0/24
        - Type: IPV4
          Value: 131.89.214.0/24
        - Type: IPV4
          Value: 131.89.215.0/24
        - Type: IPV4
          Value: 131.89.216.0/24
        - Type: IPV4
          Value: 131.89.217.0/24
        - Type: IPV4
          Value: 131.89.218.0/24
        - Type: IPV4
          Value: 131.89.219.0/24
        - Type: IPV4
          Value: 131.89.220.0/24
        - Type: IPV4
          Value: 131.89.221.0/24
        - Type: IPV4
          Value: 131.89.222.0/24
        - Type: IPV4
          Value: 131.89.223.0/24
  rWafgWhitelistIpSet:
    Type: "AWS::WAF::IPSet"
    Condition: isGlobal
    Properties:
      Name: !Join ['-', [!Ref pStackPrefix, 'match-whitelisted-ips']]
      IPSetDescriptors:
        - Type: IPV4
          Value: 130.19.42.250/32
        - Type: IPV4
          Value: 130.19.42.251/32
        - Type: IPV4
          Value: 130.19.42.252/32
        - Type: IPV4
          Value: 130.19.42.253/32
        - Type: IPV4
          Value: 131.89.194.0/24
        - Type: IPV4
          Value: 131.89.195.0/24
        - Type: IPV4
          Value: 131.89.196.0/24
        - Type: IPV4
          Value: 131.89.197.0/24
        - Type: IPV4
          Value: 131.89.198.0/24
        - Type: IPV4
          Value: 131.89.199.0/24
        - Type: IPV4
          Value: 131.89.200.0/24
        - Type: IPV4
          Value: 131.89.201.0/24
        - Type: IPV4
          Value: 131.89.202.0/24
        - Type: IPV4
          Value: 131.89.203.0/24
        - Type: IPV4
          Value: 131.89.204.0/24
        - Type: IPV4
          Value: 131.89.205.0/24
        - Type: IPV4
          Value: 131.89.206.0/24
        - Type: IPV4
          Value: 131.89.207.0/24
        - Type: IPV4
          Value: 131.89.208.0/24
        - Type: IPV4
          Value: 131.89.209.0/24
        - Type: IPV4
          Value: 131.89.210.0/24
        - Type: IPV4
          Value: 131.89.211.0/24
        - Type: IPV4
          Value: 131.89.212.0/24
        - Type: IPV4
          Value: 131.89.213.0/24
        - Type: IPV4
          Value: 131.89.214.0/24
        - Type: IPV4
          Value: 131.89.215.0/24
        - Type: IPV4
          Value: 131.89.216.0/24
        - Type: IPV4
          Value: 131.89.217.0/24
        - Type: IPV4
          Value: 131.89.218.0/24
        - Type: IPV4
          Value: 131.89.219.0/24
        - Type: IPV4
          Value: 131.89.220.0/24
        - Type: IPV4
          Value: 131.89.221.0/24
        - Type: IPV4
          Value: 131.89.222.0/24
        - Type: IPV4
          Value: 131.89.223.0/24
  rWafrWhitelistIpRule:
    Type: "AWS::WAFRegional::Rule"
    Condition: isRegional
    Properties:
      MetricName: !Join ['', [!Ref pStackPrefix, 'whitelistedips']]
      Name: !Join ['-', [!Ref pStackPrefix, 'detect-whitelisted-ips']]
      Predicates:
        - Type: IPMatch
          Negated: false
          DataId: !Ref rWafrWhitelistIpSet
  rWafgWhitelistIpRule:
    Type: "AWS::WAF::Rule"
    Condition: isGlobal
    Properties:
      MetricName: !Join ['', [!Ref pStackPrefix, 'whitelistedips']]
      Name: !Join ['-', [!Ref pStackPrefix, 'detect-whitelisted-ips']]
      Predicates:
        - Type: IPMatch
          Negated: false
          DataId: !Ref rWafgWhitelistIpSet

## --
## WebACL containing the above rules evaluated in-order
  rWafrPGEACL:
    Type: "AWS::WAFRegional::WebACL"
    Condition: isRegional
    Properties:
      MetricName: !Join ['', [!Ref pStackPrefix, 'pgeacl']]
      Name: !Join ['-', [!Ref pStackPrefix, 'pge-acl']]
      DefaultAction:
        Type: BLOCK
      Rules:
        - Action:
            Type: !Ref pRuleAction
          Priority: 10
          RuleId: !Ref rWafrWhitelistIpRule

  rWafgPGEACL:
    Type: "AWS::WAF::WebACL"
    Condition: isGlobal
    Properties:
      MetricName: !Join ['', [!Ref pStackPrefix, 'pgeacl']]
      Name: !Join ['-', [!Ref pStackPrefix, 'pge-acl']]
      DefaultAction:
        Type: BLOCK
      Rules:
        - Action:
            Type: !Ref pRuleAction
          Priority: 10
          RuleId: !Ref rWafgWhitelistIpRule

  rCFDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        PriceClass: PriceClass_100
        WebACLId: !If [ isRegional, !Ref rWafrPGEACL, !Ref rWafgPGEACL ]
          #Fn::ImportValue: !Sub '${stackPrefix}-waf-acl'
        Logging:
          Bucket: !Sub "pge-${AWS::AccountId}-cloudfront.s3.amazonaws.com"
          Prefix: !Ref "AWS::AccountId"
          IncludeCookies: True
        ViewerCertificate:
          AcmCertificateArn: !Ref rGeneratedCertificate
            #Fn::ImportValue: !Sub '${stackPrefix}-cert-arn'
          MinimumProtocolVersion: "TLSv1.2_2018"
          SslSupportMethod: "sni-only"
        Aliases:
          - !Sub '${pWebsiteFQDN}'
        Comment: Distribution for the S3web+Pipeline Pattern
        DefaultCacheBehavior:
          TargetOriginId: !Sub 'S3-Website-${pWebsiteFQDN}.s3-website-us-west-2.amazonaws.com'
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: false
          MaxTTL: 3153600
          MinTTL: 0
          SmoothStreaming: false
          DefaultTTL: 100
          Compress: false
        Enabled: true
        Origins:
          -
            DomainName: !Sub '${pWebsiteFQDN}.s3-website-us-west-2.amazonaws.com'
            OriginCustomHeaders:
              - HeaderName: Referer
                HeaderValue: !Ref pRefererValue
            Id: !Sub 'S3-Website-${pWebsiteFQDN}.s3-website-us-west-2.amazonaws.com'
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginKeepaliveTimeout: 5
              OriginProtocolPolicy: http-only
              OriginReadTimeout: 30
              OriginSSLProtocols:
                - 'TLSv1'
                - 'TLSv1.1'
                - 'TLSv1.2'
      Tags:
        - Key: AppId
          Value: !Ref pAppID
        - Key: Order
          Value: !Ref pOrderNumber
        - Key: AppName
          Value: !Ref pAppName

  rRoute53CNAMERecord:
    Type: Custom::CNAME
    Properties:
      ServiceToken: !Ref pCrossAccountServiceTokenARN
      Source: !Ref pWebsiteFQDN
      Target: !GetAtt rCFDistribution.DomainName
      PrivateHostedZone: !Ref pPrivateHostedZoneId

Outputs:
  oWebsiteUrl:
    Value: !Join ["", ["https://", !Ref pWebsiteFQDN]]
    Description: The Fully-Qualified Domain Name Website URL
  wafWebACL:
    Value: !If [ isRegional, !Ref rWafrPGEACL, !Ref rWafgPGEACL ]
  wafWebACLMetric:
    Value: !Join ['', [!Ref pStackPrefix, 'pgeacl']]
  wafIpWhitelist:
    Value: !If [ isRegional, !Ref rWafrWhitelistIpSet, !Ref rWafgWhitelistIpSet ]
  oCFDistribution:
    Description: 'RESOURCE - CLOUDFRONT - The CloudFront distribution for the frontend angular application'
    Value: !Ref rCFDistribution
  oCFDistributionDomainName:
    Description: 'The CloudFront distribution domain name for the frontend angular application'
    Value: !GetAtt rCFDistribution.DomainName
  CertificateARN:
    Description: The ARN of the generated certificate
    Value: !Ref 'rGeneratedCertificate'